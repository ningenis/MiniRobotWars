/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tubes2;

/**
 *
 * @author ikp
 */
public class LabMenu extends javax.swing.JFrame {

    /**
     * Creates new form LabMenu
     */
    Player CurrentPlayer = new Player ("ikp");
    private int harga=0;
    private int codeBuy=0;
    private Minirobot MiniAH1;
    private Minirobot MiniAV1;
    private Minirobot MiniADf1;
    private Minirobot MiniGDg1;
    
            
            
            
            public LabMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        buy = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        upgradeslot = new javax.swing.JLabel();
        upgradeMaxlife = new javax.swing.JLabel();
        MiniGDg = new javax.swing.JLabel();
        MiniADf = new javax.swing.JLabel();
        MiniAH = new javax.swing.JLabel();
        MiniAV = new javax.swing.JLabel();
        price = new javax.swing.JLabel();
        Laboratory = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 600));
        getContentPane().setLayout(null);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("TotalPrice");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(757, 98, 70, 30);

        buy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buyMouseClicked(evt);
            }
        });
        getContentPane().add(buy);
        buy.setBounds(741, 232, 110, 70);

        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(757, 482, 90, 40);

        upgradeslot.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upgradeslotMouseClicked(evt);
            }
        });
        getContentPane().add(upgradeslot);
        upgradeslot.setBounds(77, 158, 540, 30);

        upgradeMaxlife.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                upgradeMaxlifeMouseClicked(evt);
            }
        });
        getContentPane().add(upgradeMaxlife);
        upgradeMaxlife.setBounds(77, 198, 540, 40);

        MiniGDg.setText("MINI ROBOT DARAT DIAGONAL");
        MiniGDg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MiniGDgMouseClicked(evt);
            }
        });
        getContentPane().add(MiniGDg);
        MiniGDg.setBounds(87, 448, 540, 40);

        MiniADf.setText("MINI ROBOT UDARA PERTAHANAN");
        MiniADf.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MiniADfMouseClicked(evt);
            }
        });
        getContentPane().add(MiniADf);
        MiniADf.setBounds(87, 398, 540, 40);

        MiniAH.setText("MINI ROBOT UDARA HORIZONTAL");
        MiniAH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MiniAHMouseClicked(evt);
            }
        });
        getContentPane().add(MiniAH);
        MiniAH.setBounds(87, 338, 540, 40);

        MiniAV.setText("MINI ROBOT UDARA VERTIKAL");
        MiniAV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MiniAVMouseClicked(evt);
            }
        });
        getContentPane().add(MiniAV);
        MiniAV.setBounds(87, 288, 540, 40);

        price.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        getContentPane().add(price);
        price.setBounds(745, 130, 101, 87);

        Laboratory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/lab.png"))); // NOI18N
        getContentPane().add(Laboratory);
        Laboratory.setBounds(5, 0, 890, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        this.dispose();
        MainMenu mm = new MainMenu();
        mm.setVisible(true);
    }//GEN-LAST:event_backMouseClicked

    private void upgradeslotMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upgradeslotMouseClicked

        switch(this.CurrentPlayer.getmaxSlot()){
            case 3 :
                this.price.setText("100");
                harga=100;
                codeBuy=1;
                break;
            case 4 :
                this.price.setText("200");
                harga=200;
                codeBuy=2;
                break;
                
            case 5 :
                this.price.setText("300");
                harga=300;
                codeBuy=3;
                break;
        }
        
    }//GEN-LAST:event_upgradeslotMouseClicked

    private void upgradeMaxlifeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upgradeMaxlifeMouseClicked
        // TODO add your handling code here:
        switch(this.CurrentPlayer.getMaxLife()){
            case 5 :
                this.price.setText("150");
                harga=150;
                codeBuy=4;
                break;
            case 6 :
                this.price.setText("300");
                harga=200;
                codeBuy=5;
                break;
                
            case 7 :
                this.price.setText("450");
                harga=300;
                codeBuy=6;
                break;
                
        }
        
    }//GEN-LAST:event_upgradeMaxlifeMouseClicked

    private void MiniAVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MiniAVMouseClicked
        // TODO add your handling code here:
        price.setText("300");
        harga=300;
        codeBuy=7;
        MiniAV1= new MiniAV(30,60,null,null);
    }//GEN-LAST:event_MiniAVMouseClicked

    private void MiniAHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MiniAHMouseClicked
        // TODO add your handling code here:
        price.setText("300");
        harga=300;
        codeBuy=8;
        MiniAH1= new MiniAH(25,65,null,null);
    }//GEN-LAST:event_MiniAHMouseClicked

    private void MiniADfMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MiniADfMouseClicked
        // TODO add your handling code here:
        price.setText("350");
        harga=350;
        codeBuy=9;
        MiniADf1= new MiniADf(0,150,null,null);
    }//GEN-LAST:event_MiniADfMouseClicked

    private void MiniGDgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MiniGDgMouseClicked
        // TODO add your handling code here:
        price.setText("200");
        harga=200;
        codeBuy=10;
        MiniGDg1= new MiniGDg(30,60,null,null);
    }//GEN-LAST:event_MiniGDgMouseClicked

    private void buyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buyMouseClicked
        // TODO add your handling code here:
        switch(codeBuy){
            case 1 :
                try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.setMaxSlot(4);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 2 :
                 try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.setMaxSlot(5);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 3 :
                 try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.setMaxSlot(6);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 4 :
                 try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.setMaxLife(6);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 5 :
                try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.setMaxLife(7);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 6 :
                try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.setMaxLife(7);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 7 :
                try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.setMaxLife(8);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 8 :
                try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.getListrobot().add(MiniAV1);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 9 :
                 try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.getListrobot().add(MiniAH1);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 10 :
                 try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.getListrobot().add(MiniADf1);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 11 :
                 try {
                    if(CurrentPlayer.getJmlSparepart()>harga){
                        this.CurrentPlayer.getListrobot().add(MiniGDg1);
                    }
                    else {
                        throw new NoMoneyException("not enough money");
                    }
                }
                catch (NoMoneyException n){
                    n.printMessage();
                }
                break;
            case 0:
                MainMenu mm= new MainMenu();
                mm.dispose();
                break;
            
        }
        MainMenu mm= new MainMenu();
        mm.CurrentPlayer=this.CurrentPlayer;
        mm.disable();
    }//GEN-LAST:event_buyMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new LabMenu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Laboratory;
    private javax.swing.JLabel MiniADf;
    private javax.swing.JLabel MiniAH;
    private javax.swing.JLabel MiniAV;
    private javax.swing.JLabel MiniGDg;
    private javax.swing.JLabel back;
    private javax.swing.JLabel buy;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel price;
    private javax.swing.JLabel upgradeMaxlife;
    private javax.swing.JLabel upgradeslot;
    // End of variables declaration//GEN-END:variables
}
